package api

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/go-chi/chi/middleware"
)

type ctxVal string

// VersionCtx adds api version to context
func VersionCtx(version string) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			var key ctxVal = "api.version"
			r = r.WithContext(context.WithValue(r.Context(), key, version))
			next.ServeHTTP(w, r)
		})
	}
}

// RequestIDCtx adds request id to context
func RequestIDCtx(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		rid := r.Header.Get(http.CanonicalHeaderKey("Toggly-Request-Id"))
		if rid == "" {
			rid = fmt.Sprintf("req-%d", middleware.NextRequestID())
			log.Printf("[WARNING] Header Toggly-Request-Id missed. Autogenerated: %s", rid)
		}
		var key ctxVal = "api.requestId"
		ctx := r.Context()
		ctx = context.WithValue(ctx, key, rid)
		ctx = context.WithValue(ctx, middleware.RequestIDKey, fmt.Sprintf("Request: %s", rid))
		next.ServeHTTP(w, r.WithContext(ctx))

	}
	return http.HandlerFunc(fn)
}

// ServiceInfo adds service information to the response header
func ServiceInfo(name string, version string) func(http.Handler) http.Handler {
	f := func(h http.Handler) http.Handler {
		fn := func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set("Service-Name", name)
			w.Header().Set("Service-Version", version)
			h.ServeHTTP(w, r)
		}
		return http.HandlerFunc(fn)
	}
	return f
}
