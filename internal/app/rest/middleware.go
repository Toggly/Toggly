package rest

import (
	"context"
	"fmt"
	"log"
	"net/http"

	"github.com/go-chi/chi/middleware"
)

// CtxValue type
type CtxValue int

// CtxValue enum
const (
	CtxAPIVersion CtxValue = iota
	CtxValueOwner
	CtxValueRequestID
	CtxValueAuth
)

// Headers
const (
	XTogglyRequestID string = "X-Toggly-Request-Id"
	XTogglyAuth      string = "X-Toggly-Auth"
	XTogglyOwnerID   string = "X-Toggly-Owner-Id"
	XServiceName     string = "X-Service-Name"
	XServiceVersion  string = "X-Service-Version"
)

// CtxOwner returns context value for project owner
func CtxOwner(r *http.Request) string {
	return r.Context().Value(CtxValueOwner).(string)
}

// VersionCtx adds api version to context
func VersionCtx(version string) func(next http.Handler) http.Handler {
	return func(next http.Handler) http.Handler {
		return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
			r = r.WithContext(context.WithValue(r.Context(), CtxAPIVersion, version))
			next.ServeHTTP(w, r)
		})
	}
}

// RequestIDCtx adds request id to context
func RequestIDCtx(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		rid := r.Header.Get(http.CanonicalHeaderKey(XTogglyRequestID))
		if rid == "" {
			rid = fmt.Sprintf("req-%d", middleware.NextRequestID())
			log.Printf("[WARNING] Header Toggly-Request-Id missed. Autogenerated: %s", rid)
		}
		ctx := r.Context()
		ctx = context.WithValue(ctx, CtxValueRequestID, rid)
		ctx = context.WithValue(ctx, middleware.RequestIDKey, fmt.Sprintf("Request: %s", rid))
		next.ServeHTTP(w, r.WithContext(ctx))
	}
	return http.HandlerFunc(fn)
}

// AuthCtx adds auth data to context
func AuthCtx(next http.Handler) http.Handler {
	fn := func(w http.ResponseWriter, r *http.Request) {
		auth := r.Header.Get(http.CanonicalHeaderKey(XTogglyAuth))
		if auth == "" {
			log.Printf("[WARNING] Header X-Toggly-Auth missed.")
			UnauthorizedResponse(w, r)
			return
		}
		ctx := r.Context()
		ctx = context.WithValue(ctx, CtxValueAuth, auth)
		next.ServeHTTP(w, r.WithContext(ctx))
	}
	return http.HandlerFunc(fn)
}

// OwnerCtx adds auth data to context
func OwnerCtx(next http.Handler) http.Handler {

	fn := func(w http.ResponseWriter, r *http.Request) {
		owner := r.Header.Get(http.CanonicalHeaderKey(XTogglyOwnerID))
		if owner == "" {
			log.Printf("[WARNING] Header X-Toggly-Owner-Id missed.")
			NotFoundResponse(w, r)
			return
		}
		ctx := r.Context()
		ctx = context.WithValue(ctx, CtxValueOwner, owner)
		next.ServeHTTP(w, r.WithContext(ctx))
	}
	return http.HandlerFunc(fn)
}

// ServiceInfo adds service information to the response header
func ServiceInfo(name string, version string) func(http.Handler) http.Handler {
	f := func(h http.Handler) http.Handler {
		fn := func(w http.ResponseWriter, r *http.Request) {
			w.Header().Set(http.CanonicalHeaderKey(XServiceName), name)
			w.Header().Set(http.CanonicalHeaderKey(XServiceVersion), version)
			h.ServeHTTP(w, r)
		}
		return http.HandlerFunc(fn)
	}
	return f
}
